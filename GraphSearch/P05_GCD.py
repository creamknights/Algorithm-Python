""" 
최대공약수 계산(유클리드 호제법)
유클리드 호제법
두 자연수에 대한 최대공약수를 구하는 대표적 알고리즘
두 자연수 A, B에 대하여 (A > B)
A를 B로 나눈 나머지를 R이라고 할 때
A와 B의 최대공약수는 B와 R의 최대공약수와 같다.
반복적 구조이므로 재귀 함수로 작성
"""

def gcd(a, b):
    if a % b == 0:    # 종료 조건
        return b
    else:
        return gcd(b, a % b)
    
print(gcd(192, 162))    # 6

""" 
192, 162
162, 30
30, 12
12, 6 -> 12 % 6 == 0 이므로 최대공약수 6

(*) 재귀 함수 사용 유의사항
모든 재귀 함수는 반복문을 이용하여 동일한 기능을 구현할 수 있다.
재귀 함수가 반복문보다 유리한 경우도 있고 불리한 경우도 있다.

컴퓨터가 함수를 연속적으로 호출하면 컴퓨터 메모리 내부의 스택 프레임에 쌓인다.
그래서 스택을 사용해야 할 때 구현상 스택 라이브러리 대신에 재귀 함수를 이용하는 경우가 많다.

"""