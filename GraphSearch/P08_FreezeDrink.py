""" 
<음료수 얼려 먹기>
N x M 크기의 얼음 틀이 있다.
구멍이 뚫려 있는 부분은 0,
칸막이가 존재하는 부분은 1로 표시된다.

구멍이 뚫려 있는 부분끼리 상, 하, 좌, 우로 붙어 있는 경우
서로 열려 있는 것(하나의 묶음)으로 간주한다.
얼음 틀의 모양이 주어졌을 때 생성되는 총 아이스크림의 개수 구하기

DFS 혹은 BFS로 해결할 수 있다. 얼음 틀을 그래프 형태로 모델링하면
상, 하, 좌, 우로 붙어 있는 경우 -> 인접한 노드
특정 위치에서 DFS/BFS를 수행해서 이동 가능한(0으로 표시된) 모든 경로에 대해서 방문 처리 진행

DFS 활용 알고리즘
1. 특정 지점의 인접 상, 하, 좌, 우를 살펴본 뒤에 주변 지점 중에서 값이 '0'이면서 아직 방문하지 않은 지점이 있다면 해당 지점을 방문
2. 방문한 지점에서 다시 상, 하, 좌, 우를 살펴보면서 방문을 진행하는 과정을 반복하면
    연결된 모든 지점을 방문할 수 있다.
3. 모든 노드에 대하여 1~2번의 과정을 반복하며, 방문하지 않은 지점의 수를 count 한다.
"""

# DFS로 특정 노드를 방문하고 연결된 모든 노드들도 방문
def dfs(x, y):
    # 주어진 범위를 벗어나는 경우에는 즉시 종료
    if x <= -1 or x >= n or y <= -1 or y >= m:
        return False
    # 현재 노드를 아직 방문하지 않았다면
    if graph[x][y] == 0:
        # 해당 노드 방문 처리
        graph[x][y] = 1
        # 상, 하, 좌, 우의 위치들도 모두 재귀적으로 호출
        dfs(x - 1, y)
        dfs(x, y - 1)
        dfs(x + 1, y)
        dfs(x, y + 1)
        return True
    return False    # 칸막이가 존재하는 1로 표시된 부분이므로

# N, M을 공백을 기준으로 구분하여 입력 받기
n, m = map(int, (input().split()))

# 2차원 리스트의 맵 정보 입력 받기
graph = []
for i in range(n):
    graph.append(list(map(int, input())))

# 모든 노드(위치)에 대하여 음료수 채우기
result = 0
for i in range(n):
    for j in range(m):
        # 현재 위치에서 DFS 수행
        if dfs(i, j) == True:
            result += 1

print(result)