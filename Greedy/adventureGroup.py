"""
<모험가 길드>
N명의 모험가가 주어졌을 때
공포도가 X인 모험가는 반드시 X명 이상으로 구성한 모험가 그룹에 참여해야 여행을 떠날 수 있다.
최대 몇 개의 모험가 그룹을 만들수 있는지 구하기

N = 5, 공포도가 2 3 1 2 2 (입력 받음)
그룹 1에 공포도가 1, 2, 3인 모험가를 한 명씩 넣고
그룹 2에 공포도가 2인 남은 두명을 넣게 되면 총 2개의 그룹을 만들 수 있다.
또한 몇 명의 모험가는 마을에 남아 있어도 되기 때문에 모든 모험가를 특정한 그룹에 넣을 필요는 없다.

(문제 해결 아이디어)
1 2 2 2 3 으로 <오름차순> 정렬 이후에 공포도가 낮은 모험가부터 하나씩 확인
앞에서부터 공포도를 확인하며 '현재 그룹에 포함된 모험가의 수'가 '현재 확인하고 있는 공포도'보다 크거나 같으면 이를 그룹으로 설정
        1 = 1 이므로 그룹 1 결성
        1 < 2 이므로 아직 그룹 결성 못 함 (그룹 2에 자기 포함 1명 있음 < 현재 확인하고 있는 공포도는 2)
        2 = 2 이므로 그룹 결성 가능. 그룹 2 결성
        1 < 2 이므로 아직 그룹 결성 못 함
        2 < 3 이므로 그룹 결성 못 함

"""

n = int(input())
data = list(map(int, input().split()))
data.sort()    # 오름차순 정렬

result = 0    # 총 그룹의 수
count = 0    # 현재 그룹에 포함된 모험가의 수

for i in data:    # 공포도를 낮은 것부터 하나씩 확인하기
    count += 1    # 현재 그룹에 해당 모험가를 포함시키기
    if count >= i:
        result += 1    # 그룹의 수 count
        count = 0    # 초기화

print(result)    # 총 그룹의 수 출력