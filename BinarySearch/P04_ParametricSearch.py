""" 
파라메트릭 서치
최적화 문제를 결정 문제(예/아니오)로 바꾸어 해결하는 기법
예시) 특정 조건을 만족하는 가장 알맞은 값을 빠르게 찾는 최적화 문제
일반적으로 코딩 테스트에서 파라메트릭 서치 문제는 이진 탐색을 이용하여 해결할 수 있다.
"""

""" 
<떡볶이 떡 만들기>
절단기에 높이 H를 지정하면 줄지어진 떡을 한 번에 절단한다. 높이가 H보다 작은 떡은 잘리지 않는다.
높이가 19, 14, 10, 17인 떡이 나란히 있고 절단기 높이를 15로 지정하면 자른 뒤 떡 높이는 15, 14, 10, 15이다.
잘린 떡의 길이는 4, 0, 0, 2이다. 손님은 6만큼의 길이를 가져간다.

손님이 요청한 총 길이가 M일 때 적어도 M만큼의 떡을 얻기 위해 절단기에 설정할 수 있는 높이의 최댓값을 구하는 프로그램을 작성하시오.

[문제 해결 아이디어]
적절한 높이를 찾을 때까지 이진 탐색을 수행하여 높이 H를 반복해서 조정한다.
'현재 이 높이로 자르면 조건을 만족할 수 있는가?'를 확인한 후 조건의 만족 여부(예/아니오)에 따라 탐색 범위를 좁혀서 해결한다.
절단기의 높이는 0부터 10억까지의 정수 중 하나이다.
    -> 이렇게 큰 탐색 범위를 보면 가장 먼저 이진 탐색을 떠올려야 한다.

시작점 인덱스: 0, 끝점: 19(가장 긴 떡의 길이), 중간점: 9(현재 자르고자 하는 높이 H)
9에서 잘랐을 때의 잘린 떡의 길이의 합이 M보다 크면 조건을 만족한다.
9에서 조건을 만족하면 중간점을 14((10+19)//2)로 이동하여 조건 만족 여부를 검사한다.
중간점이 17일 때 조건을 만족하지 않는다. 끝점을 중간점의 왼쪽인 16으로 바꾼다. (시작점: 15, 끝점: 16이므로 중간점은 15가 된다.)
"""

# 떡의 개수(N)와 손님이 요청한 떡의 길이(M) 입력
n, m = list(map(int, input().split()))
# 각 떡의 개별 높이 정보 입력
array = list(map(int, input().split()))

# 이진 탐색을 위한 시작점과 끝점 설정
start = 0
end = max(array)

# 이진 탐색 수행 (반복적)
result = 0
while(start <= end):
    total = 0
    mid = (start + end) // 2
    for x in array:
        # 잘랐을 때의 떡의 양 계산
        if x > mid:
            total += x - mid
    # 떡의 양이 부족한 경우(total이 M보다 작은 경우) 더 많이 자르기 (왼쪽 부분 탐색)
    if total < m:
        end = mid - 1
    # 떡의 양이 충분한 경우(total이 M보다 큰 경우) 덜 자르기 (오른쪽 부분 탐색)
    else:
        result = mid    # 최대한 덜 잘랐을 때가 정답이므로, 여기에서 result에 기록
        start = mid + 1

# 가장 마지막에 기록된 result 출력
print(result)